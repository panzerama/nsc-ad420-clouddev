swagger: '2.0'
info:
  description: This is our sample Tasklist API
  version: 1.0.0
  title: Tasklist
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: jd@example.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: jd.swagger.io
basePath: /v2
tags:
  - name: task
    description: an individual task
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
schemes:
  - http
paths:
  '/task/{taskId}':
    get:
      tags:
        - task
      summary: Find task by ID
      description: Returns a single task
      operationId: getTaskById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: taskId
          in: path
          description: ID of task to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
    post:
      tags:
        - task
      summary: Updates a task in the list with form data
      description: ''
      operationId: updateTaskWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: taskId
          in: path
          description: ID of task that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the task
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the pet
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
    delete:
      tags:
        - task
      summary: Deletes a task
      description: ''
      operationId: deleteTask
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: taskId
          in: path
          description: task id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: task not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/users/{id}/tasks':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserTasksById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: The user id that needs to be fetched.
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/users/{userId}/tasks/{taskId}':
    get:
      tags:
        - user
      summary: Get task by id from user by name
      description: ''
      operationId: getTaskByIDUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: integer
        - name: taskId
          in: path
          type: integer
          required: true
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username or task Id supplied
        '404':
          description: User not found
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      tasks:
        type: array
        items:
          $ref: '#/definitions/Task'
    xml:
      name: User
  Task:
    type: object
    required:
      - description
    properties:
      id:
        type: integer
        format: int64
      description:
        type: string
        example: thing to do
    xml:
      name: Task
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
